{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","components/NavBar.js","pages/Resources.js","pages/SearchBuddies.js","pages/UserBuddies.js","pages/UserProfile.js","index.js"],"names":["module","exports","__webpack_require__","p","Component","Boolean","window","location","hostname","match","Nav","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","Link","to","React","Layout","NavBar_Nav","SearchBuddies","UserBuddies","UserProfile","app","document","getElementById","ReactDOM","render","Router","Route","exact","path","component","Resources","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8PCItBC,YCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uFCbeC,cACnB,SAAAA,IAAe,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAD,GAAAM,KAAAH,6EASb,OACEI,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAG,KAAT,aACAJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAG,cAAT,sBACAJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAG,gBAAT,cACAJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAG,gBAAT,sBAfyBC,IAAMlB,WCGlBmB,mLAGjB,OAEEN,EAAAC,EAAAC,cAACK,EAAD,aAL8BF,IAAMlB,WCHrBqB,mLAEjB,OACER,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,wCAJmCG,IAAMlB,WCA5BsB,mLAEjB,OACET,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,gCAJiCG,IAAMlB,WCA1BuB,mLAEjB,OACEV,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,gCAJiCG,IAAMlB,WCQzCwB,EAAMC,SAASC,eAAe,OAEpCC,IAASC,OACPf,EAAAC,EAAAC,cAACc,EAAA,EAAD,KACEhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjCrB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOE,KAAK,eAAeC,UAAWZ,IACtCR,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOE,KAAK,eAAeC,UAAWX,IACtCT,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOE,KAAK,eAAeC,UAAWV,MAG5CC,GNmGM,kBAAmBW,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.586fb272.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default class Nav extends React.Component {\n  constructor() {\n    super()\n\n  }\n\n\n  render() {\n\n\n    return (\n      <div>\n        <Link to=\"/\">Resources</Link>\n        <Link to=\"/findbuddy\">Search For Buddies</Link>\n        <Link to=\"/userbuddies\">My Buddies</Link>\n        <Link to=\"/userprofile\">My Profile</Link>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport NavBar from \"../components/NavBar\";\n\n\nexport default class Layout extends React.Component {\n  render() {\n\n    return (\n\n      <NavBar></NavBar>\n    );\n  }\n}\n","\nimport React from \"react\";\n\nexport default class SearchBuddies extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Search For Buddies</h1>\n      </div>\n    );\n  }\n}\n","\nimport React from \"react\";\n\nexport default class UserBuddies extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>My Buddies</h1>\n      </div>\n    );\n  }\n}\n","\nimport React from \"react\";\n\nexport default class UserProfile extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>My Profile</h1>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Router, Route, Link } from \"react-router-dom\";\nimport Resources from './pages/Resources'\nimport SearchBuddies from './pages/SearchBuddies'\nimport UserBuddies from './pages/UserBuddies'\nimport UserProfile from './pages/UserProfile'\n\nconst app = document.getElementById('app');\n//ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(\n  <Router>\n    <div>\n      <Route exact path=\"/\" component={Resources}/>\n      <Route path=\"/findbuddies\" component={SearchBuddies}/>\n      <Route path=\"/userbuddies\" component={UserBuddies}/>\n      <Route path=\"/userprofile\" component={UserProfile}/>\n    </div>\n  </Router>,\napp);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}