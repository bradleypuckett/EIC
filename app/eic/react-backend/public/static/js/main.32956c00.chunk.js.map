{"version":3,"sources":["serviceWorker.js","components/NavBar.js","pages/Resources.js","pages/SearchBuddies.js","pages/UserBuddies.js","pages/UserProfile.js","Layout.js","index.js"],"names":["Boolean","window","location","hostname","match","library","add","fas","fab","NavBar","react_default","a","createElement","id","Link","to","react_fontawesome_index_es","icon","size","title","color","className","React","Component","Resources","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","persons","_this2","axios","get","then","res","data","setState","map","person","name","SearchBuddies","UserBuddies","UserProfile","Layout","BrowserRouter","NavBar_NavBar","Route","exact","path","component","app","document","getElementById","ReactDOM","render","Layout_Layout","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.32956c00.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport '../css/nav.css'\nlibrary.add(fas, fab);\n\n\nexport default class NavBar extends React.Component {\n  render() {\n\n    return (\n      <div id=\"nav\">\n          <Link to=\"/\">\n            <FontAwesomeIcon\n              icon=\"folder\"\n              size=\"1x\"\n              title=\"Resources\"\n              color=\"white\"\n              className=\"nav_item_left\"\n            />\n          </Link>\n          <Link to=\"/findbuddy\">\n            <FontAwesomeIcon\n              icon=\"user-friends\"\n              size=\"1x\"\n              color=\"white\"\n              className=\"nav_item_left\"\n              title=\"Find Buddy\"\n            />\n          </Link>\n          <Link to=\"/userbuddies\">\n            <FontAwesomeIcon\n              icon=\"address-book\"\n              size=\"1x\"\n              color=\"white\"\n              className=\"nav_item_left\"\n              title=\"My Buddies\"\n              />\n          </Link>\n          <Link to=\"/userprofile\">\n            <FontAwesomeIcon\n              icon=\"user\"\n              size=\"1x\"\n              color=\"white\"\n              className=\"nav_item_right\"\n              title=\"My Profile\"\n              />\n          </Link>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport axios from 'axios';\n\nexport default class Resources extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      persons: []\n    }\n  }\n\n  // TODO: actually implement in Flux flow\n  componentDidMount() {\n    axios.get('https://jsonplaceholder.typicode.com/users')\n      .then(res => {\n        const persons = res.data;\n        this.setState({ persons });\n      })\n  }\n\n  render() {\n\n    return (\n      <div>\n        <h3>Resources</h3>\n        <p>This is dummy info from a GET request to satisfy the ajax learning requirement</p>\n        <ul>\n        { this.state.persons.map(person => <li>{person.name}</li>)}\n        </ul>\n      </div>\n    );\n  }\n}\n","\nimport React from \"react\";\n\nexport default class SearchBuddies extends React.Component {\n  render() {\n    return (\n      <div>\n\n        <h3>Search For Buddies</h3>\n      </div>\n    );\n  }\n}\n","\nimport React from \"react\";\n\nexport default class UserBuddies extends React.Component {\n  render() {\n    return (\n      <div>\n\n        <h3>My Buddies</h3>\n      </div>\n    );\n  }\n}\n","\nimport React from \"react\";\n\nexport default class UserProfile extends React.Component {\n  render() {\n    return (\n      <div>\n\n        <h3>My Profile</h3>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport NavBar from \"./components/NavBar\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport Resources from './pages/Resources'\nimport SearchBuddies from './pages/SearchBuddies'\nimport UserBuddies from './pages/UserBuddies'\nimport UserProfile from './pages/UserProfile'\nimport './css/main.css'\nimport './css/stupid.css'\n\n\n\nexport default class Layout extends React.Component {\n  render() {\n\n    return (\n      <div id=\"main\">\n      <BrowserRouter>\n\n\n\n\n          <div id=\"middle\">\n            <NavBar></NavBar>\n            <div id=\"content\">\n            <Route exact path=\"/\" component={Resources}/>\n            <Route path=\"/findbuddy\" component={SearchBuddies}/>\n            <Route path=\"/userbuddies\" component={UserBuddies}/>\n            <Route path=\"/userprofile\" component={UserProfile}/>\n            </div>\n          </div>\n\n\n\n      </BrowserRouter>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\n//import './css/stupid.css'\nimport * as serviceWorker from './serviceWorker';\nimport Layout from './Layout';\n\n\nconst app = document.getElementById('app');\n//ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<Layout />, app);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}